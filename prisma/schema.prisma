// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Post {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    authorId  String

    content String @db.VarChar(255)

    @@index([authorId])
}

model Profile {
    id        String   @id @default(cuid())
    authorId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    username    String @db.VarChar(255)
    description String @db.VarChar(255)

    // urls
    github      GithubUrl? @relation(fields: [githubUrlId], references: [id])
    githubUrlId String?    @unique

    twitter      TwitterUrl? @relation(fields: [twitterUrlId], references: [id])
    twitterUrlId String?     @unique

    linkedin      LinkedinUrl? @relation(fields: [linkedinUrlId], references: [id])
    linkedinUrlId String?      @unique

    website      WebsiteUrl? @relation(fields: [websiteUrlId], references: [id])
    websiteUrlId String?     @unique

    readcv      ReadcvUrl? @relation(fields: [readcvUrlId], references: [id])
    readcvUrlId String?    @unique

    FollowersOnProfile FollowersOnProfile[]

    @@index([authorId])
}

model TwitterUrl {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    link    String
    Profile Profile?
}

model WebsiteUrl {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    link    String
    Profile Profile?
}

model GithubUrl {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    link    String
    Profile Profile?
}

model LinkedinUrl {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    link    String
    Profile Profile?
}

model ReadcvUrl {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    link    String
    Profile Profile?
}

model FollowersOnProfile {
    profile    Profile  @relation(fields: [profileId], references: [id])
    profileId  String
    follower   Follower @relation(fields: [followerId], references: [id])
    followerId String

    assignedAt DateTime @default(now())
    assignedBy String

    @@id([profileId, followerId])
    @@index([profileId])
    @@index([followerId])
}

model Follower {
    id                 String               @id @default(cuid())
    authorId           String
    FollowersOnProfile FollowersOnProfile[]
}
